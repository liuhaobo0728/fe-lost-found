{"remainingRequest":"/Users/liuhaobo/Desktop/fe-lost-found/node_modules/babel-loader/lib/index.js!/Users/liuhaobo/Desktop/fe-lost-found/src/utils/http.js","dependencies":[{"path":"/Users/liuhaobo/Desktop/fe-lost-found/src/utils/http.js","mtime":1557394131278},{"path":"/Users/liuhaobo/Desktop/fe-lost-found/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liuhaobo/Desktop/fe-lost-found/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _Promise from \"/Users/liuhaobo/Desktop/fe-lost-found/node_modules/@babel/runtime-corejs2/core-js/promise\";\nimport \"core-js/modules/es6.regexp.replace\";\n\nvar _this = this;\n\nimport axios from \"axios\";\nimport qs from \"qs\";\nimport store from \"../store/index\"; // import MessageBox from 'element-ui'\n// 提示框\n\nvar tip = function tip(msg) {\n  _this.$notify({\n    title: '',\n    showClose: false,\n    message: msg\n  });\n}; // 跳转登录页\n\n\nvar toLogin = function toLogin() {\n  router.replace({\n    path: '/touser/login',\n    query: {\n      redirect: router.currentRoute.fullPath\n    }\n  });\n}; // 统一错误处理\n\n\nvar errorHandle = function errorHandle(status, other) {\n  // 状态码判断\n  switch (status) {\n    // 401: 未登录状态，跳转登录页\n    case 401:\n      toLogin();\n      break;\n    // 403 token过期\n    // 清除token并跳转登录页\n\n    case 403:\n      tip('登录过期，请重新登录');\n      localStorage.removeItem('token');\n      store.commit('loginSuccess', null);\n      setTimeout(function () {\n        toLogin();\n      }, 1000);\n      break;\n    // 404请求不存在\n\n    case 404:\n      tip('请求的资源不存在');\n      break;\n\n    default:\n      console.log(other);\n  }\n}; // 创建axios实例\n\n\nvar instance = axios.create({\n  timeout: 10000\n}); // // post请求头\n// instance.defaults.headers.post['Content-Type'] = \n//     'application/x-www-form-urlencoded;';\n// 请求拦截器\n\ninstance.interceptors.request.use(function (config) {\n  // 每次发送请求之前判断是否存在token，如果存在，则统一在http请求的header都加上token，不用每次请求都手动添加了\n  // 即使本地存在token，也有可能token是过期的，所以在响应拦截器中要对返回状态进行判断\n  var token = store.getters.token;\n  token && (config.headers.Authorization = token);\n  return config;\n}, function (error) {\n  return _Promise.error(error);\n}); // 响应拦截器\n\ninstance.interceptors.response.use(function (res) {\n  return res.status === 200 ? _Promise.resolve(res) : _Promise.reject(res);\n}, function (error) {\n  var response = error.response;\n\n  if (response) {\n    // 请求已发出，但是不在2xx的范围 \n    errorHandle(response.status, response.data.message);\n    return _Promise.reject(response);\n  } else {\n    // 处理断网的情况\n    // eg:请求超时或断网时，更新state的network状态\n    // network状态在app.vue中控制着一个全局的断网提示组件的显示隐藏\n    // 关于断网组件中的刷新重新获取数据，会在断网组件中说明\n    store.commit('changeNetwork', false);\n  }\n});\nexport default instance;",{"version":3,"sources":["/Users/liuhaobo/Desktop/fe-lost-found/src/utils/http.js"],"names":["axios","qs","store","tip","msg","$notify","title","showClose","message","toLogin","router","replace","path","query","redirect","currentRoute","fullPath","errorHandle","status","other","localStorage","removeItem","commit","setTimeout","console","log","instance","create","timeout","interceptors","request","use","config","token","getters","headers","Authorization","error","response","res","resolve","reject","data"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,IAAf;AACA,OAAOC,KAAP,MAAkB,gBAAlB,C,CAEA;AAEA;;AACA,IAAMC,GAAG,GAAG,SAANA,GAAM,CAAAC,GAAG,EAAI;AACf,EAAA,KAAI,CAACC,OAAL,CAAa;AACTC,IAAAA,KAAK,EAAE,EADE;AAETC,IAAAA,SAAS,EAAE,KAFF;AAGTC,IAAAA,OAAO,EAAEJ;AAHA,GAAb;AAKH,CAND,C,CAQA;;;AACA,IAAMK,OAAO,GAAG,SAAVA,OAAU,GAAM;AAClBC,EAAAA,MAAM,CAACC,OAAP,CAAe;AACXC,IAAAA,IAAI,EAAE,eADK;AAEXC,IAAAA,KAAK,EAAE;AACHC,MAAAA,QAAQ,EAAEJ,MAAM,CAACK,YAAP,CAAoBC;AAD3B;AAFI,GAAf;AAMH,CAPD,C,CASA;;;AACA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,MAAD,EAASC,KAAT,EAAmB;AACnC;AACA,UAAQD,MAAR;AACI;AACA,SAAK,GAAL;AACIT,MAAAA,OAAO;AACP;AACJ;AACA;;AACA,SAAK,GAAL;AACIN,MAAAA,GAAG,CAAC,YAAD,CAAH;AACAiB,MAAAA,YAAY,CAACC,UAAb,CAAwB,OAAxB;AACAnB,MAAAA,KAAK,CAACoB,MAAN,CAAa,cAAb,EAA6B,IAA7B;AACAC,MAAAA,UAAU,CAAC,YAAM;AACbd,QAAAA,OAAO;AACV,OAFS,EAEP,IAFO,CAAV;AAGA;AACJ;;AACA,SAAK,GAAL;AACIN,MAAAA,GAAG,CAAC,UAAD,CAAH;AACA;;AACJ;AACIqB,MAAAA,OAAO,CAACC,GAAR,CAAYN,KAAZ;AApBR;AAsBH,CAxBD,C,CAyBA;;;AACA,IAAMO,QAAQ,GAAG1B,KAAK,CAAC2B,MAAN,CAAa;AAC1BC,EAAAA,OAAO,EAAE;AADiB,CAAb,CAAjB,C,CAIA;AACA;AACA;AAEA;;AACAF,QAAQ,CAACG,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CACI,UAAAC,MAAM,EAAI;AACN;AACA;AACA,MAAMC,KAAK,GAAG/B,KAAK,CAACgC,OAAN,CAAcD,KAA5B;AACAA,EAAAA,KAAK,KAAKD,MAAM,CAACG,OAAP,CAAeC,aAAf,GAA+BH,KAApC,CAAL;AACA,SAAOD,MAAP;AACH,CAPL,EAQI,UAAAK,KAAK,EAAI;AACL,SAAO,SAAQA,KAAR,CAAcA,KAAd,CAAP;AACH,CAVL,E,CAYA;;AACAX,QAAQ,CAACG,YAAT,CAAsBS,QAAtB,CAA+BP,GAA/B,CACI,UAAAQ,GAAG;AAAA,SAAIA,GAAG,CAACrB,MAAJ,KAAe,GAAf,GAAqB,SAAQsB,OAAR,CAAgBD,GAAhB,CAArB,GAA4C,SAAQE,MAAR,CAAeF,GAAf,CAAhD;AAAA,CADP,EAEI,UAAAF,KAAK,EAAI;AAAA,MACGC,QADH,GACgBD,KADhB,CACGC,QADH;;AAEL,MAAIA,QAAJ,EAAc;AACV;AACArB,IAAAA,WAAW,CAACqB,QAAQ,CAACpB,MAAV,EAAkBoB,QAAQ,CAACI,IAAT,CAAclC,OAAhC,CAAX;AACA,WAAO,SAAQiC,MAAR,CAAeH,QAAf,CAAP;AACH,GAJD,MAIO;AACH;AACA;AACA;AACA;AACApC,IAAAA,KAAK,CAACoB,MAAN,CAAa,eAAb,EAA8B,KAA9B;AACH;AACJ,CAfL;AAkBA,eAAeI,QAAf","sourcesContent":["import axios from \"axios\";\nimport qs from \"qs\";\nimport store from \"../store/index\";\n\n// import MessageBox from 'element-ui'\n\n// 提示框\nconst tip = msg => {\n    this.$notify({\n        title: '',\n        showClose: false,\n        message: msg\n    });\n}\n\n// 跳转登录页\nconst toLogin = () => {\n    router.replace({\n        path: '/touser/login',\n        query: {\n            redirect: router.currentRoute.fullPath\n        }\n    });\n}\n\n// 统一错误处理\nconst errorHandle = (status, other) => {\n    // 状态码判断\n    switch (status) {\n        // 401: 未登录状态，跳转登录页\n        case 401:\n            toLogin();\n            break;\n        // 403 token过期\n        // 清除token并跳转登录页\n        case 403:\n            tip('登录过期，请重新登录');\n            localStorage.removeItem('token');\n            store.commit('loginSuccess', null);\n            setTimeout(() => {\n                toLogin();\n            }, 1000);\n            break;\n        // 404请求不存在\n        case 404:\n            tip('请求的资源不存在');\n            break;\n        default:\n            console.log(other);\n    }\n}\n// 创建axios实例\nconst instance = axios.create({\n    timeout: 10000\n});\n\n// // post请求头\n// instance.defaults.headers.post['Content-Type'] = \n//     'application/x-www-form-urlencoded;';\n\n// 请求拦截器\ninstance.interceptors.request.use(\n    config => {\n        // 每次发送请求之前判断是否存在token，如果存在，则统一在http请求的header都加上token，不用每次请求都手动添加了\n        // 即使本地存在token，也有可能token是过期的，所以在响应拦截器中要对返回状态进行判断\n        const token = store.getters.token;\n        token && (config.headers.Authorization = token);\n        return config;\n    },\n    error => {\n        return Promise.error(error);\n    })\n\n// 响应拦截器\ninstance.interceptors.response.use(\n    res => res.status === 200 ? Promise.resolve(res) : Promise.reject(res),\n    error => {\n        const { response } = error;\n        if (response) {\n            // 请求已发出，但是不在2xx的范围 \n            errorHandle(response.status, response.data.message);\n            return Promise.reject(response);\n        } else {\n            // 处理断网的情况\n            // eg:请求超时或断网时，更新state的network状态\n            // network状态在app.vue中控制着一个全局的断网提示组件的显示隐藏\n            // 关于断网组件中的刷新重新获取数据，会在断网组件中说明\n            store.commit('changeNetwork', false);\n        }\n    }\n);\n\nexport default instance;\n"]}]}